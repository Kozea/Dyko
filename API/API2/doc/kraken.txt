
Dyko - Kraken
*************

Kraken is


Site
====


Kraken - HTTP Requests Dispatcher
---------------------------------

# TODO: write module documentation

class class kraken.Site(site_root, kalamar_conf=None, secret_key=None, fail_on_inexistent_parser=True)

   WSGI application from a site root and a kalamar configuration file.

   find_template(path)

      Find the template at ``path``.

      Search for an existing template named
      <path>/index.<type>.<engine> or <path>.<type>.<engine> where
      <engine> is a koral engine name.

      Return (template_name, type, engine) for the first one found or
      None.

      >>> import test.kraken
      >>> site = test.kraken.make_site()

      Directory stucture of site.site_root:
         index.html.genshi hello.html.jinja2 hello/

            index.genshi # No <type> index.html # No <engine>
            index.html.foo # Non-existent <engine>

         lorem/
            index.txt.jinja2

      >>> site.find_template(u'/')
      (u'index.html.genshi', u'html', u'genshi')
      >>> site.find_template(u'/nonexistent')

      >>> site.find_template(u'/hello/')
      (u'hello.html.jinja2', u'html', u'jinja2')
      >>> site.find_template(u'/hello/world')

      >>> site.find_template(u'/lorem/')
      (u'lorem/index.txt.jinja2', u'txt', u'jinja2')
      >>> site.find_template(u'/lorem/ipsum')

   handle_python(request)

      Try handling a ``request`` with a python controller.

      Return a Response object or raise NotFound.

   handle_request(request)

      TODO docstring.

   handle_simple_template(request)

      Try handling a request with only a template.

      Return a Response object or raise NotFound.

   handle_static_file(request)

      Try handling a request with a static file.

      The request path is interpreted as a filename relative to the
      site root. Return a Response object or raise NotFound.

   static handle_trailing_slash(request)

      Redirect if ``request.path`` has no trailing slash.

   import_(name)

      Helper for python controllers to "import" other controllers.

      Return a module object.

      >>> import test.kraken
      >>> site = test.kraken.make_site()
      >>> module = site.import_('inexistent')
      Traceback (most recent call last):
          ...
      ImportError: No module named inexistent

      >>> site.import_('lorem.ipsum') # doctest: +ELLIPSIS
      ...                             # doctest: +NORMALIZE_WHITESPACE
      <module 'kraken_site_....lorem.ipsum' 
          from '...test/kraken/site/lorem/ipsum.py...'>

   make_request(environ)

      TODO docstring.

   process_response(request, response)

      TODO docstring.

   simple_template_context(request)

      TODO docstring.

   template_response(request, template_name, values=None, extension=None, engine=None)

      Build a response for ``request`` according to given parameters.

      >>> import test.kraken
      >>> site = test.kraken.make_site()
      >>> req = site.make_request({})
      >>> site.template_response(req, 'foo')
      Traceback (most recent call last):
          ...
      ValueError: extension and engine not provided but template_name does not match *.<extension>.<engine>
      >>> site.template_response(req, 'foo', {}, 'html')
      Traceback (most recent call last):
          ...
      TypeError: Can provide both of extension and engine or neither, but not only one
      >>> response = site.template_response(req, 'index.html.genshi')
      >>> response.mimetype
      'text/html'
      >>> response = site.template_response(req, 'index.html.genshi', {},
      ...                                   'html', 'genshi')
      >>> response.mimetype
      'text/html'

   template_suffix_re

      TODO docstring.


Cache
=====

class class kraken.cached_kalamar.CachedKalamarSite(kalamar_site)

   Kalamar cache wrapper.

   Wrapper for kalamar that caches results of the following methods:
      ``isearch``, ``search``, ``open``, ``item_from_filename``

   All cached entries are removed when the following methods are
   called:
      ``save``, ``remove``

   Warning: arguments for cached methods must be hashable.

   >>> class FakeKalamar(object):
   ...     y = 1
   ...     def search(self, x, y=None):
   ...         print 'search', x
   ...         if isinstance(x, int):
   ...             return [x + self.y]
   ...         elif x == '*':
   ...             return [1, 2, 3]
   ...     def save(self, y):
   ...         print 'save', y
   ...         self.y = y
   ...     def remove(self, y):
   ...         print 'remove', y
   ...     def item_from_filename(self, z):
   ...         print 'filename', z
   ...         return int(z) + self.y
   ...     def test(self):
   ...         print 'test', self.y
   ...     ObjectDoesNotExist = StandardError('Object does not exist')
   ...     MultipleObjectsReturned = StandardError('Multiple objects')
   >>> kalamar = CachedKalamarSite(FakeKalamar())
   >>> kalamar.search(2)
   search 2
   [3]
   >>> kalamar.search(5)
   search 5
   [6]
   >>> kalamar.search(2) # result is cached: FakeKalamar.search is not called
   [3]
   >>> for i in kalamar.isearch(2): print i # result is cached too with isearch
   3
   >>> kalamar.save(-1)
   save -1
   >>> kalamar.search(2) # cache has been invalidated
   search 2
   [1]
   >>> kalamar.search(2) # result is cached
   [1]
   >>> kalamar.remove(2)
   remove 2
   >>> kalamar.search(2) # cache has been invalidated
   search 2
   [1]
   >>> kalamar.item_from_filename('6')
   filename 6
   5
   >>> kalamar.item_from_filename('6') # result is cached
   5
   >>> kalamar.search('2') # '2' is no int, return nothing
   search 2
   >>> kalamar.open('2') # '2' is no int, raise Error
   Traceback (most recent call last):
   ...
   StandardError: Object does not exist
   >>> kalamar.open('*') # '*' means [1,2,3], raise Error
   Traceback (most recent call last):
   ...
   StandardError: Multiple objects
   >>> kalamar.test()
   test -1

   open(access_point, request=None)

      Return the item in access_point matching request.

      If there is no result, raise ``Site.ObjectDoesNotExist``. If
      there are more than 1 result, raise
      ``Site.MultipleObjectsReturned``.

   remove(*args, **kwargs)

      TODO docstring

   save(*args, **kwargs)

      TODO docstring


Utils
=====

Various utilities for Kraken.

kraken.utils.make_absolute_url(request, url)

   Return a clean absolute URL from ``request`` and ``url``.

   # fake request for http://localhost/foo/ >>> request =
   Request(werkzeug.create_environ(path='/foo/'))

   >>> make_absolute_url(request, 'http://localhost/foo/bar/')
   'http://localhost/foo/bar/'
   >>> make_absolute_url(request, '/foo/bar/')
   'http://localhost/foo/bar/'
   >>> make_absolute_url(request, './bar/')
   'http://localhost/foo/bar/'
   >>> make_absolute_url(request, 'bar/')
   'http://localhost/foo/bar/'
   >>> make_absolute_url(request, '../bar/')
   'http://localhost/bar/'
   >>> make_absolute_url(request, '/')
   'http://localhost/'

   # Same tests without the trailing slash >>>
   make_absolute_url(request, 'http://localhost/foo/bar')
   'http://localhost/foo/bar' >>> make_absolute_url(request,
   '/foo/bar') 'http://localhost/foo/bar' >>>
   make_absolute_url(request, './bar') 'http://localhost/foo/bar' >>>
   make_absolute_url(request, 'bar') 'http://localhost/foo/bar' >>>
   make_absolute_url(request, '../bar') 'http://localhost/bar'

kraken.utils.redirect(request, url, status=302)

   Redirect client to relative or absolute ``url`` with ``status``.

   >>> @Request.application
   ... def test_app(request):
   ...     return redirect(request, request.args['redirect_to'],
   ...                     int(request.args.get('status', 302)))
   >>> client = werkzeug.Client(test_app)

   >>> client.get('/foo?redirect_to=../bar') # doctest: +ELLIPSIS
   (..., '302 FOUND', [...('Location', 'http://localhost/bar')...)

   >>> client.get('/foo?redirect_to=/') # doctest: +ELLIPSIS
   (..., '302 FOUND', [...('Location', 'http://localhost/')...)

class class kraken.utils.Request(environ, session_secret_key=None)

   TODO docstring.

   session

      TODO docstring.

class class kraken.utils.Response(response=None, status=None, headers=None, mimetype=None, content_type=None, direct_passthrough=False)

   TODO docstring.

class class kraken.utils.StaticFileResponse(filename)

   Respond with the a static file.

   Respond with a static file, guessing the mimitype from the
   filename, and using WSGIâ€™s ``file_wrapper`` when available.

kraken.utils.arg_count(function)

   Return the nubmer of explicit arguments the function takes.

   >>*<<args and >>**<<kwargs arguments are excluded.

   >>> arg_count(lambda: 1)
   0
   >>> arg_count(lambda x, y: 1)
   2
   >>> arg_count(lambda x, y, *args: 1)
   2

kraken.utils.runserver(site, args=None)

   Run a developpement server for the given Kraken ``site``.

   Setup test >>> real_argv = sys.argv >>> import logging >>>
   logging.getLogger('werkzeug').setLevel(logging.FATAL)

   Test >>> runserver(None, ['--help']) # doctest: +ELLIPSIS
   +NORMALIZE_WHITESPACE usage: ... >>> sys.argv = [sys.argv[0]] >>>
   try: runserver(None, ['--port=1']) # doctest: +ELLIPSIS ... except
   Exception, e: print e[1] Permission denied >>> sys.argv =
   [sys.argv[0], '--help'] >>> runserver(None) # doctest: +ELLIPSIS
   +NORMALIZE_WHITESPACE usage: ...

   Restore real argv >>> sys.argv = real_argv

class class kraken.utils.KalamarSiteForKraken(config_filename=None, fail_on_inexistent_parser=True)
